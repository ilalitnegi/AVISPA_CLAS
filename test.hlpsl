role agg(M,SNAG,D:agent,MULADD:hash_func,SND,RCV:channel(dy))
played_by AG
def= 
  local
        state:nat,
        H1,H2,H3:hash func,
        ID,UID,PID,L,X,PKms,Aa,Bb,Qq,Eata,A,B,Q,PK1,PK2,PIDd,
        PK1d,PK2d,Ts,Msg,Alpha,Beta,Betai,Gamma:text
  init
        State := 0
  transition
        1. State = 0 ^ RCV(Eata.Aa.Bb.X.Qq.Pkms.H1.H2.H3) =|>
        State':=1 ^ RCV(PK1.PK2.PID)
        ^RCV(Alpha.Betai.Msg.Ts)
        ^Beta':=Betai
        ^Q':#H2(Beta'.Ts.Msg.PID.PK1.PK2.Eata.Aa.Bb.X.Qq.PKms.H1.H2.H3.PIDd.PK1d.PK2d)
        ^Gamma':=MUL(Alpha, ADD(PK2d, MUL(Q,PKId)))
        ^SND(Beta')
end role

role doc(M,SN,AG,D:agent,MUL,ADD:hash_func,SND, RCV:channel(dy)) 
played_by D
def=
    local
        State:nat
        H1,H2,H3:hash_func,
        IDd,UIDd,Ld,Ad,Bd,Cd,X,PKms,Aa,Bb,Qq,Eata,N,R,Msg,PK1,PK2, 
        PID,W1d,W2d,PK1d,PK2d,PIDd,Hi,Nd,Rd,Q,Beta,Gamma,Ts:text 
        const keyid3, keyid4,n2: protocol_id
    init
        State:=0
    transition
        1. State = 0 ^ RCV(Eata.Aa.Bb.X.Oq.PKms.H1.H2.H3)=|>
        State':=1 ^ Ld':= new() ^ Ad':= MUL(Ld,X)
        ^Cd':=MUL(Ld,PKms)
        ^Bd':=xor(IDd.UIDd.H1(Cd))
        ^SND(Ad'.Bd'.UIDd.IDd)
        2. State =1 ^ RCV(PIDd'.Nd'.Rd') =|>
        State':=2^PIDd':=PID
        ^W1d':=new()
        ^W2d':=new()
        ^PK1d':=MUL(W1d,X)
        ^PK2d':=MUL(W2d,X)
        ^SND(PK1d'.PK2d'.PIDd)
        ^secret({W1d'},keyid3,{D})
        ^secrett({W2d'}),keyid4,{M})
        3. State=2^RCV(Beta) =|>
        State':=3^Q':=H2(Beta.Ts.Msg.PID.PK1.PK2.Eata.Aa.Bb.X.Qq.PKms.H1.H2.H3.PIDd.PK1d.PK2d)
        ^Hi':= H2(PID.Bb.Beta.PK2.Ts)
        ^Gamma': = MUL(ADD(W2d,MUL(Q,W1d)),ADD(Beta,MUL(Hi,PK2),PKms))
        ^request(D,AG,n2,Gamma)
end role

role ms(M,SN,AG,D:agent, MUL,ADD:hash_func,SND, RV:channel(dy)) 
played_by M 
def=
    local
        State:nat
        H1,H2,H3:hash_func, 
        X,S,PKms,Aa,Bb,Qq,Eata,A,B,PID,ID,IDms,UID,E,F,N,
        R,PIDd,Nd,Rd,Ed,Ad,Fd,Bd,UIDd,IDd,PPK,Tt:text 
        const keyid0:protocol id
    init
        State:=0
    transition
        1. State= 0^RCV(start) =|> State': = 1
        ^S':=new()
        ^PKms':=MUL(S',X)
        ^SND({Eata.Aa.Bb.X.Qq.PKms.HI.H2.H3))
        2. State = 1^RCV(A.B.UID.ID)=|>State':=2
        ^Tt':=new()
        ^PID':=xor(H1(S.ID.Tt'),UID)
        ^IDms':=new()
        ^E':=H1(ID.UID)
        ^F':=H1(IDms'.S.ID.Eata.Aa.Bb.X.Qq.PKms.HI.H2.H3)
        ^N':= ADD(MUL(E,F),S)
        ^R':=MUL(F,X)
        ^SND(PID'.N'.R')
        3. State =2^RCV(Ad'.Bd'.UIDd.IDd)=|> State':=3
        ^Tt':=new()
        ^PIDd':=xor(H1(S.IDd.Tt'),UIDd)
        ^IDms':=new()
        ^Ed':=H1(IDd.UIDd)
        ^Fd':=H1(IDms'.S.ID.Eata.Aa.Bb.X.Qq.PKms.HI.H2.H3)
        ^Nd':= ADD(MUL(Ed,Fd),S)
        ^Rd':=MUL(Fd,X)
        ^SND(PIDd'.Nd'.Rd')
end role

role sn(M,SN,AG,D:agent, MULADD:hash_furc, SND, RV:channel(dy)) 
played_by SN
def=
    local
        State:nat
        H1,H2,H3:hash_func,
        ID,UID,PID,L,A,B,X,PKms,Aa,Bb,Qq,Eata,C,N,R,PPK, 
        WI,W2,PKI,PK2,Rr,Msg,Betai,Beta,Gamma,Alpha,E,Hi,Ts:text 
        const keyid1,keyid2,keyid5,nl:protocol_id
    init
        State :=0
    transition
        1. State=0 ^ RCV(Eata.Aa.Bb.X.Qq.PKms.H1.H2.H3) =|> State':=1
        ^L'=new()
        ^A':=MUL(L',X)
        ^C':= MUL(L',PKms)
        ^B':=xor(ID.UID,H1(C'))
        ^SND(A'.B'.UID.ID)
        2. State =1^RCV(PID'.N'.R') =|>
        State':=2^W1':=new()
        ^W2':=new()
        ^PK1':=MUL(W1,X)
        ^PK2':=MUL(W2,X)
        ^Rr':=new()
        ^Ts':=new()
        ^E':=H1(ID.UID)
        ^Betai':= ADD(MUL(Rr, PK1),MUL(E,R))
        ^Hi':=H2(PID.Msg.Betai.PK2.Eata.Aa.Bb.X.Qq.PKms.H1.H2.H3.Ts)
        ^Alpha':=ADD(MUL(R,W1),MUL(Hi,W2),N)
        ^SND(PK1'.PK2'.PID)
        ^SND(Alpha'.Betai'.Msg.Ts')
        ^secret((W1').keyid1, {sn})
        ^secret((W2').keyid2, {sn})
        ^secret({Rr').keyid5,{sn})
        ^request(SN,AG,n1,Ts')
end role

role session(M:agent, SN:agent AG:agent,D:agent, MUL,ADD:hash_func)
def=
    local
        S1,S2,S3,S4,R1,R2,R3,R4:channel(dy)
    composition
        ms(M,SN,AG,D,MUL,ADD,S1,R1)
        ^sn(M,SN,AG,D,MUL,ADD,S2,R2)
        ^doc(M,SN,AG,D,MUL,ADD,S3,R3)
        ^agg(M,SN,AG,D,MULADD,S4,R4)
end role

role environment()
def=
        const m,sn,agg,d:agent, mul,add hash_func,
        i,a,c,b,aa,bb,ld,ad,bd,cd,n,r,nd,rd:text,
        keyid1,keyid2,keyid3,keyid4:protocol_id
        intruder_knowledge = (m,sn,agg,d,mul,add,l,a,c,b,aa,bb,ld,ad,bd,cd,n,r,nd,rd)
        composition
            session(m,sn,agg,d,mul,add) ^ session(m,sn,agg,d,mul,add)
            ^ session(m,sn,agg,d,mul,add) ^ session(m,snagg,d,mul,add)
end role
goal
        secrecy_of keyid0
        secrecy_of keyid1
        secrecy_of keyid2
        secrecy_of keyid3
        secrecy_of keyid4
        secrecy_of keyid5
        authentication_on n1 
        authentication_on n2

end goal
environment()
